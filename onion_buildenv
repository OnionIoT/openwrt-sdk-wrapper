#!/bin/bash

cd $(dirname $0)

. ./profile

FILES_DIR="$PWD/files"

[ -z "$OPENWRT_VERSION" ] && exit 1
[ -z "$TARGET" ] && exit 1
[ -z "$SUBTARGET" ] && exit 1

BUILD_DIR="$PWD/build/openwrt-$OPENWRT_VERSION/$TARGET/$SUBTARGET"
mkdir -p "$BUILD_DIR"

TARGET_SDK_DIR="$BUILD_DIR/sdk"
SDK_ZIP="$BUILD_DIR/${SDK_URL##*/}"
SDK_FILE="${SDK_ZIP//.tar.xz}"

TARGET_IMAGE_BUILDER_DIR="$BUILD_DIR/imagebuilder"
IMAGE_BUILDER_ZIP="$BUILD_DIR/${IMAGE_BUILDER_URL##*/}"
IMAGE_BUILDER_FILE="${IMAGE_BUILDER_ZIP//.tar.xz}"

download_file() {
	local url=$1
	local output=$2

	[ -e $output ] && return 0

	if ! curl "$url" -o "$output"; then
		echo "ERROR downloading from $url"
		return 1
	fi

	return 0
}

verify_archive() {
	local file=$1

	if ! tar tJf "$file" > /dev/null; then
		echo "ERROR: invalid archive $file"
		return 1
	fi

	return 0

}

extract_archive() {
	local dir=$1
	local file=$2

	if ! tar -C "$dir" -xJf "$file"; then
		echo "ERROR: decompression failed for $file"
		return 1
	fi

	return 0
}

download_sdk() {
	download_file "$SDK_URL" "$SDK_ZIP"
}

verify_sdk() {
	verify_archive "$SDK_ZIP"
}

extract_sdk() {
	extract_archive "$BUILD_DIR" "$SDK_ZIP" || return 1

	[ -z "$TARGET_SDK_DIR" ] && return 1
	[ -n "$TARGET_SDK_DIR" ] && [ -d "$TARGET_SDK_DIR" ] && rm -rf "$TARGET_SDK_DIR"

	mv "$SDK_FILE" "$TARGET_SDK_DIR" || return 1

	return 0
}

prepare_sdk() {
	export LC_ALL=C

	## copy over the repo keys
	cp keys/key-build* $TARGET_SDK_DIR

	$TARGET_SDK_DIR/scripts/feeds update -a
	$TARGET_SDK_DIR/scripts/feeds install -a

	## refresh the package config (selects all packages for compilation)
	make -C "$TARGET_SDK_DIR" defconfig
}

update_package_feeds() {
	## add packages feeds

	[ -z "$PACKAGE_FEEDS" ] && return 0

	echo -e "$PACKAGE_FEEDS" >> $TARGET_SDK_DIR/feeds.conf.default

	return 0
}

download_builder() {
	download_file "$IMAGE_BUILDER_URL" "$IMAGE_BUILDER_ZIP"
}

verify_builder() {
	verify_archive "$IMAGE_BUILDER_ZIP"
}

extract_builder() {
	extract_archive "$BUILD_DIR" "$IMAGE_BUILDER_ZIP" || return 1

	[ -z "$TARGET_IMAGE_BUILDER_DIR" ] && return 1
	[ -n "$TARGET_IMAGE_BUILDER_DIR" ] && [ -d "$TARGET_IMAGE_BUILDER_DIR" ] && rm -rf "$TARGET_IMAGE_BUILDER_DIR"

	mv "$IMAGE_BUILDER_FILE" "$TARGET_IMAGE_BUILDER_DIR" || return 1

	return 0
}

update_package_repos() {
	## add packages

	[ -z "$PACKAGE_REPOS" ] && return 0

	echo -e "$PACKAGE_REPOS" >> $TARGET_IMAGE_BUILDER_DIR/repositories.conf

	return 0
}

setup_imagebuilder() {
	download_builder || return 1
	verify_builder || return 1
	extract_builder || return 1
	update_package_repos || return 1
}

setup_sdk() {
	download_sdk || return 1
	verify_sdk || return 1
	extract_sdk || return 1
	update_package_feeds || return 1
	prepare_sdk || return 1
}

compile_package() {
	local pkg="$1"

	make -C "$TARGET_SDK_DIR" package/$pkg/compile

	retval=$?
	if [ $retval -ne 0 ]; then
		make -C "$TARGET_SDK_DIR" package/$pkg/compile V=99
		COMPILATION_ERROR=1
		echo "\n>> ERROR: Compile of package ${pkg} returned code $retval"
	else
		COMPILATION_ERROR=0
	fi
}

build_packages() {
	local packages="$@"
	local pkg

	packages="${packages:-${SDK_PACKAGES}}"

	for pkg in $packages; do
		compile_package "$pkg"
	done

	if [ $COMPILATION_ERROR -ne 0 ]; then
		echo "\n>> PACKAGE COMPILATION ERROR!\n"
		return 1
	else
		echo "> Compile success"
	fi
}

index_packages() {
	make -C "$TARGET_SDK_DIR" package/index
}

build_image() {
	local files profile

	profile=$1
	[ -d "$FILES_DIR" ] && files="FILE=$FILES_DIR"

	if [ -z "$IMAGE_BUILDER_PACKAGES" ]; then
		make -C "$TARGET_IMAGE_BUILDER_DIR" image PROFILE=$profile $files
	else
		make -C "$TARGET_IMAGE_BUILDER_DIR" image PROFILE=$profile PACKAGES="$packages" $files
	fi

	if [ $? -ne 0 ]; then
		echo "ERROR during image building for $profile"
		return 1
	fi

}

build_firmware() {
	local profiles="$@"
	local prof

	profiles="${profiles:-${BUILD_PROFILES}}"

	for prof in $profiles; do
		if build_image "$prof"; then
			echo "> Compiled firmware at $TARGET_IMAGE_BUILDER_DIR/bin/targets/$TARGET/$SUBTARGET/"
		else
			echo "> Compilation error!"
			return 1
		fi
	done
}

case "$1" in
	setup_sdk)
		setup_sdk || exit 1
		;;
	build_package)
		shift
		build_packages $@ || exit 1
		;;
	index_packages)
		index_packages || exit 1
		;;
	setup_imagebuilder)
		setup_imagebuilder || exit 1
		;;
	build_fw)
		shift
		build_firmware $@ || exit 1
		;;
	*)
		echo "Invalid option"
		exit 1
esac
